# Docker-команда FROM вказує базовий образ контейнера
# Наш базовий образ - це Linux з попередньо встановленим python-3.9.2
FROM python:3.9.2

# Метадані, інформація про авторів
# LABEL "DenysTantsiura the author of the container, apps created by Always on the Right Track Team: https://github.com/DenysTantsiura/pva"
LABEL author="DenysTantsiura the author of the container, apps created by Always on the Right Track Team github.com/DenysTantsiura/pva"

# Визначає метадані про автора Author для зображення, що створюється в заданому рядку. 
# Витягти ці метадані можна за допомогою команди docker inspect -f {{.Author}} IMAGE. 
# Зазвичай використовується для запису імені автора зображення та його контактних даних.
MAINTAINER "DenysTantsiura ghost0002501@gmail.com"

# Встановимо змінні середовища
ENV APP_HOME /pva
# ENV python setup.py install
# ENV pva

# Встановимо робочу директорію усередині контейнера
WORKDIR $APP_HOME

# ARG Визначає змінну для передачі до Docker під час збірки

# Скопіюємо інші файли до робочої директорії контейнера
COPY . .

# ADD Копіює файли з контексту створення або з URL-посилань у створюваний образ. 
# Якщо архівний файл додається з локального шляху, то він буде автоматично розпакований. 
# Так як діапазон функціональності інструкції ADD дуже великий, у загальному 
# випадку краще скористатися більш простою командою COPY для копіювання файлів та каталогів.

# CMD Запускає інструкцію під час ініціалізації контейнера. Інструкція CMD заміщається 
# будь-якими аргументами, вказаними у команді docker run після імені образу. Насправді 
# виконується лише остання інструкція CMD, а всі попередні інструкції CMD будуть скасовані.

# Встановимо залежності усередині контейнера
RUN pip install -r requirements.txt
RUN python setup.py install

# CMD ["pva"]

# Позначимо порт де працює програма всередині контейнера
EXPOSE 3000

# Запустимо нашу програму всередині контейнера, команди та 
# аргументи для контейнера під час його вмконання
ENTRYPOINT ["python", "setup.py", "install"]
ENTRYPOINT ["pva"]

# VOLUME Оголошує заданий файл або каталог як том (точка підключення папки для додавання
# та зберігання даних на постійній основі). Якщо такий файл або каталог вже існує в зображенні, 
# він копіюється у том під час запуску контейнера. Якщо задано кілька аргументів, то вони 
# інтерпретуються як визначення кількох томів.
